# -*- coding: utf-8 -*-
"""tic-tac-toe

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rlgQZARrz8rMtfeQRgEF3wEr8S0FRcF-
"""

import math

# Initialize empty Tic-Tac-Toe board
board = [[" " for _ in range(3)] for _ in range(3)]

def print_board(board):
    for row in board:
        print("|".join(row))
        print("-" * 5)

print_board(board)

def check_winner(board):
    # Check rows, columns, and diagonals
    for row in board:
        if row[0] == row[1] == row[2] and row[0] != " ":
            return row[0]

    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] and board[0][col] != " ":
            return board[0][col]

    if board[0][0] == board[1][1] == board[2][2] and board[0][0] != " ":
        return board[0][0]

    if board[0][2] == board[1][1] == board[2][0] and board[0][2] != " ":
        return board[0][2]

    return None  # No winner yet

def minimax(board, depth, is_maximizing):
    winner = check_winner(board)
    if winner == "X":
        return -10 + depth  # Human wins
    if winner == "O":
        return 10 - depth  # AI wins
    if all(cell != " " for row in board for cell in row):
        return 0  # Draw

    if is_maximizing:
        best_score = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == " ":
                    board[i][j] = "O"
                    score = minimax(board, depth + 1, False)
                    board[i][j] = " "
                    best_score = max(best_score, score)
        return best_score

    else:
        best_score = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == " ":
                    board[i][j] = "X"
                    score = minimax(board, depth + 1, True)
                    board[i][j] = " "
                    best_score = min(best_score, score)
        return best_score

def best_move(board):
    best_score = -math.inf
    move = None

    for i in range(3):
        for j in range(3):
            if board[i][j] == " ":
                board[i][j] = "O"
                score = minimax(board, 0, False)
                board[i][j] = " "

                if score > best_score:
                    best_score = score
                    move = (i, j)

    return move

def play_game():
    human = "X"
    ai = "O"

    while True:
        print_board(board)
        winner = check_winner(board)
        if winner:
            print(f"{winner} wins!")
            break
        if all(cell != " " for row in board for cell in row):
            print("It's a draw!")
            break

        if human == "X":
            row, col = map(int, input("Enter row and column (0-2): ").split())
            if board[row][col] == " ":
                board[row][col] = "X"
                human = "O"
        else:
            print("AI is making a move...")
            move = best_move(board)
            if move:
                board[move[0]][move[1]] = "O"
                human = "X"

play_game()

