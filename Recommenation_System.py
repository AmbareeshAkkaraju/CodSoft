# -*- coding: utf-8 -*-
"""Recommenation System

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Cax06aXdU5suJ3eDhkP1WrmidCNcELKF
"""

pip install pandas numpy scikit-learn

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Sample dataset
movies = pd.DataFrame({
    "movie_id": [1, 2, 3, 4, 5],
    "title": ["Inception", "Interstellar", "The Dark Knight", "Titanic", "Avatar"],
    "genre": ["Sci-Fi Thriller", "Sci-Fi Adventure", "Action Crime", "Romance Drama", "Sci-Fi Adventure"]
})

print(movies)

# Convert genres into feature vectors using TF-IDF
vectorizer = TfidfVectorizer()
tfidf_matrix = vectorizer.fit_transform(movies["genre"])

# Compute similarity
cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)

def recommend_movies(movie_title, movies, cosine_sim):
    idx = movies.index[movies["title"] == movie_title][0]
    scores = list(enumerate(cosine_sim[idx]))
    sorted_scores = sorted(scores, key=lambda x: x[1], reverse=True)[1:3]  # Top 2 similar movies
    recommendations = [movies["title"][i[0]] for i in sorted_scores]
    return recommendations

# Example Usage
print(recommend_movies("Inception", movies, cosine_sim))

pip install scikit-surprise

from surprise import Dataset, Reader, SVD
from surprise.model_selection import train_test_split
from surprise import accuracy

# Sample user ratings dataset
ratings_dict = {
    "user_id": [1, 1, 2, 2, 3, 3, 4, 4],
    "movie_id": [1, 2, 2, 3, 3, 4, 4, 5],
    "rating": [5, 4, 5, 3, 4, 5, 2, 4]
}

df = pd.DataFrame(ratings_dict)

reader = Reader(rating_scale=(1, 5))
data = Dataset.load_from_df(df[['user_id', 'movie_id', 'rating']], reader)

# Split data
trainset, testset = train_test_split(data, test_size=0.2)

# Use SVD (Singular Value Decomposition)
model = SVD()
model.fit(trainset)

# Make predictions
predictions = model.test(testset)
accuracy.rmse(predictions)

def recommend_for_user(user_id, model, movies):
    movie_ids = movies["movie_id"].tolist()
    predictions = [model.predict(user_id, mid) for mid in movie_ids]
    predictions.sort(key=lambda x: x.est, reverse=True)
    recommended_movies = [movies[movies["movie_id"] == pred.iid]["title"].values[0] for pred in predictions[:3]]
    return recommended_movies

# Example Usage
print(recommend_for_user(2, model, movies))

